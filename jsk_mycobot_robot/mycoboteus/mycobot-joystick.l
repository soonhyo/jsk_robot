#!/usr/bin/env roseus
(load "package://mycoboteus/mycobot-interface.l")

(ros::roseus-add-msgs "sensor_msgs")

;; (defun get-joy (msg)
;;   (setq *joy-com* (send msg :axes))
;;   (setq *joy-buttons* (send msg :buttons))
;;   (print *joy-buttons*)
;;   (print *joy-com*)
;;   )
(defun joystick-init ()
  (ros::subscribe "/joy"
                  sensor_msgs::Joy
                  #'teleop-joy-cb)
  )
(defun joint-state-update ()
  (send *fake-robot* :angle-vector (send *ri* :state :potentio-vector))
  (send *irtviewer* :draw-objects)
  )

(defun joint-pos-pub(target-coords)
  (setq *end-pose* (send *robot* :rarm :end-coords :copy-worldcoords))
  (send *end-pose* :translate target-coords :world)

  (send *robot* :rarm :inverse-kinematics *end-pose*)
  (setq ((send *irtviewer* :viewer) . geo::eye) *v*)

  (send *joint_command_msg* :name (send *robot* :joint-list :name))
  (send *joint_command_msg* :position (send *robot* :angle-vector))
  ;; (print (send *robot* :angle-vector))
  ;; (send *joint_command_msg* :velocity )
  (ros::publish "/joint_command" *joint_command_msg*)
  )

(defun joint-ori-pub(p)
  (let (resolution resolution-minus)
    (setq *end-pose* (send *robot* :rarm :end-coords :copy-worldcoords))
    (setq resolution (/ pi 30))
    (setq resolution-minus (/ -pi 30))
    (cond
      ((= p 0)
       (send *end-pose* :rotate resolution-minus :y :world)
       )
      ((= p 1)
       (send *end-pose* :rotate resolution :y :world)
       )
      ((= p 2)
       (send *end-pose* :rotate resolution :x :world)
       )
      ((= p 3)
       (send *end-pose* :rotate resolution-minus :x :world)
       )
      ((= p 4)
       (send *end-pose* :rotate resolution-minus :z :world)
       )
      ((= p 5)
       (send *end-pose* :rotate resolution :z :world)
       )
      )

    (send *robot* :rarm :inverse-kinematics *end-pose*)
    (setq ((send *irtviewer* :viewer) . geo::eye) *v*)
    (send *irtviewer* :draw-objects)
    (send *joint_command_msg* :name (send *robot* :joint-list :name))
    (send *joint_command_msg* :position (send *robot* :angle-vector))
    ;; (print (send *robot* :angle-vector))
    ;; (send *joint_command_msg* :velocity )
    (ros::publish "/joint_command" *joint_command_msg*)
    )
  )
(defun grasp-on()
  (send *ri* :start-grasp)
  )
(defun grasp-off()
  (send *ri* :stop-grasp)
  )
(defun servo-on()
  (send *robot* :rarm :angle-vector (send *ri* :state :potentio-vector))
  (send *ri* :servo-on)
  (setq *passive-mode* nil)
  )
(defun servo-off()
  (send *ri* :servo-off)
  (setq *passive-mode* t)
  )
(defun init-pose()
  (send *robot* :reset-pose)
  (send *ri* :angle-vector (send *robot* :rarm :angle-vector) 2000)
  (unix:sleep 2)
  (ros::ros-info "go init pose")
  )
(defun save-pose()
  (setq *save-angles* (send *robot* :rarm :angle-vector))
  (ros::ros-info "saved current pose")
  )
(defun go-save-pose()
  (send *robot* :rarm :angle-vector *save-angles*)
  (send *ri* :angle-vector (send *robot* :rarm :angle-vector) 2000)
  (unix:sleep 2)
  (ros::ros-info "go saved pose")
  )

(defun teleop-joy-cb(msg)
  ;; mode callback
  (let* ((axes (send msg :axes))
         (Lstick (coerce (subseq axes 0 2) float-vector))
         (Rstick (coerce (subseq axes 3 5) float-vector))
         (buttons (send msg :buttons))
         (move-unit)
         (move-unit-minus)
         (rotate-unit)
         (rotate-unit-minus)
         (boost)
         (share (elt buttons 8))
         (options (elt buttons 9))
         (home (elt buttons 10))

         (L1 (elt buttons 4))
         (L2 (elt buttons 6))
         (R1 (elt buttons 5))
         (right/left       (elt Lstick 0))
         (forward/backward (elt Lstick 1))
         (yaw          (elt Rstick 0))
         (up/down          (elt Rstick 1))

         (cross (elt buttons 0))
         (circle (elt buttons 1))
         (triangle (elt buttons 2))
         (square (elt buttons 3))
         )
    (setq move-unit 5)
    (setq move-unit-minus (* -1 move-unit))
    (setq rotate-unit 0.05)
    (setq rotate-unit-minus (* -1 rotate-unit))
    (setq boost 2)
    ;; (setq *end-pose* (send *robot* :rarm :end-coords :copy-worldcoords))
    (cond
      ((= L1 1)
       (when (= L2 1) ;;boost movement
         (setq move-unit (* move-unit boost))
         (setq move-unit-minus (* move-unit-minus boost)))
       (when (> forward/backward 0.05)
         (joint-pos-pub (float-vector (* move-unit forward/backward) 0 0)))
       (when (< forward/backward -0.05)
         (joint-pos-pub (float-vector (* move-unit forward/backward) 0 0)))
       (when (> right/left 0.05)
         (joint-pos-pub (float-vector 0 (* move-unit right/left) 0)))
       (when (< right/left -0.05)
         (joint-pos-pub (float-vector 0 (* move-unit right/left) 0)))
       (when (> up/down 0.05)
         (joint-pos-pub (float-vector 0 0 (* move-unit up/down))))
       (when (< up/down -0.05)
         (joint-pos-pub (float-vector 0 0 (* move-unit up/down))))
       )
      ((= R1 1)
       (when (= L2 1) ;;boost
         (setq rotate-unit (* rotate-unit boost))
         (setq rotate-unit-minus (* rotate-unit-minus boost)))
       (when (> forward/backward rotate-unit )
         (joint-ori-pub 0))
       (when (< forward/backward rotate-unit-minus)
         (joint-ori-pub 1))
       (when (> right/left rotate-unit)
         (joint-ori-pub 2))
       (when (< right/left rotate-unit-minus)
         (joint-ori-pub 3))
       (when (> yaw rotate-unit)
         (joint-ori-pub 4))
       (when (< yaw rotate-unit-minus)
         (joint-ori-pub 5))
       )
      ((= circle 1)
       (grasp-on)
       )
      ((= cross 1)
       (grasp-off)
       )
      ((= triangle 1)
       (servo-on)
       )
      ((= square 1)
       (servo-off)
       )
      ((= options 1)
       (init-pose)
       )
      ((= share 1)
       (save-pose)
       )
      ((= home 1)
       (go-save-pose)
       )
      )
    ;; (print *end-pose*)

    ;; (send *ri* :angle-vector (send *robot* :rarm :angle-vector))
    ;; (send *ri* :wait-interporation)
    )
  )

;; mycobot init
(mycobot-init)
(setq *fake-robot* (copy-object *robot*))
;; (send *robot* :angle-vector (send *ri* :state :potentio-vector))
;; (send *irtviewer* :draw-objects)
(objects (list *fake-robot*))
;; variables
(setq *joy-axes* nil)
(setq *joy-buttons* nil)
(setq *end-pose* nil)
(setq *joint_command_msg* (instance sensor_msgs::JointState :init))
(setq *save-angles* nil)
(setq *passive-mode* nil)

;;viewer
(setq vp #f(-958.862 794.316 860.356)
      vt #f(11.3147 -19.7581 215.055)
      lra 140
      uda 27)
(send *irtviewer* :viewpoint vp)
(send *irtviewer* :look1 vt lra uda)
(send *irtviewer* :draw-objects)

(setq *v* (copy-object (send *irtviewer* :viewer :viewing)))

;; start teleop node
(joystick-init)


;; (defun arm-move())

(ros::roseus "teleop_node")
(ros::rate 10)
(ros::advertise "/joint_command" sensor_msgs::JointState 1)
(while (ros::ok)
  (ros::spin-once)
  (joint-state-update)
  (ros::sleep)
  )
(exit)
