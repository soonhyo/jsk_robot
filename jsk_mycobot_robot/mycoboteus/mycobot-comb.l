#!/usr/bin/env roseus
(load "package://mycoboteus/mycobot-interface.l")
(load "models/arrow-object.l")
(setq *arrow-mycobot-arm* (arrow))

(ros::roseus-add-msgs "jsk_recognition_msgs")
(ros::roseus-add-msgs "sensor_msgs")
(ros::roseus-add-msgs "std_msgs")
(ros::roseus-add-msgs "geometry_msgs")

;; (defun joint-pos-pub(target-coords)
;;   (setq *end-pose* (send *robot* :rarm :end-coords :copy-worldcoords))
;;   (send *end-pose* :translate target-coords :world)

;;   (send *robot* :rarm :inverse-kinematics *end-pose*)
;;   (setq ((send *irtviewer* :viewer) . geo::eye) *v*)
;;   (send *irtviewer* :draw-objects)
;;   (send *joint_command_msg* :name (send *robot* :joint-list :name))
;;   (send *joint_command_msg* :position (send *robot* :angle-vector))
;;   ;; (print (send *robot* :angle-vector))
;;   ;; (send *joint_command_msg* :velocity )
;;   (ros::publish "/joint_command" *joint_command_msg*)
;;   )

;; (defun joint-ori-pub(p)
;;   (let (resolution resolution-minus)
;;     (setq *end-pose* (send *robot* :rarm :end-coords :copy-worldcoords))
;;     (setq resolution (/ pi 30))
;;     (setq resolution-minus (/ -pi 30))
;;     (cond
;;       ((= p 0)
;;        (send *end-pose* :rotate resolution-minus :y :world)
;;        )
;;       ((= p 1)
;;        (send *end-pose* :rotate resolution :y :world)
;;        )
;;       ((= p 2)
;;        (send *end-pose* :rotate resolution :x :world)
;;        )
;;       ((= p 3)
;;        (send *end-pose* :rotate resolution-minus :x :world)
;;        )
;;       ((= p 4)
;;        (send *end-pose* :rotate resolution-minus :z :world)
;;        )
;;       ((= p 5)
;;        (send *end-pose* :rotate resolution :z :world)
;;        )
;;       )

;;     (send *robot* :rarm :inverse-kinematics *end-pose*)
;;     (setq ((send *irtviewer* :viewer) . geo::eye) *v*)
;;     (send *irtviewer* :draw-objects)
;;     (send *joint_command_msg* :name (send *robot* :joint-list :name))
;;     (send *joint_command_msg* :position (send *robot* :angle-vector))
;;     ;; (print (send *robot* :angle-vector))
;;     ;; (send *joint_command_msg* :velocity )
;;     (ros::publish "/joint_command" *joint_command_msg*)
;;     )
;;   )
;; (defun grasp-on()
;;   (send *ri* :start-grasp)
;;   )
;; (defun grasp-off()
;;   (send *ri* :stop-grasp)
;;   )
;; (defun servo-on()
;;   (send *robot* :rarm :angle-vector (send *ri* :state :potentio-vector))
;;   (send *irtviewer* :draw-objects)
;;   (send *ri* :servo-on)
;;   (setq *passive-mode* nil)
;;   )
;; (defun servo-off()
;;   (send *ri* :servo-off)
;;   (setq *passive-mode* t)
;;   )
;; (defun init-pose()
;;   (send *robot* :reset-pose)
;;   (send *irtviewer* :draw-objects)
;;   (send *ri* :angle-vector (send *robot* :rarm :angle-vector) 2000)
;;   (unix:sleep 2)
;;   (ros::ros-info "go init pose")
;;   )
;; (defun save-pose()
;;   (setq *save-angles* (send *robot* :rarm :angle-vector))
;;   (ros::ros-info "saved current pose")
;;   )
;; (defun go-save-pose()
;;   (send *robot* :rarm :angle-vector *save-angles*)
;;   (send *irtviewer* :draw-objects)
;;   (send *ri* :angle-vector (send *robot* :rarm :angle-vector) 2000)
;;   (unix:sleep 2)
;;   (ros::ros-info "go saved pose")
;;   )


;; mycobot init
(mycobot-init)
;; (send *robot* :angle-vector (send *ri* :state :potentio-vector))
;; (send *irtviewer* :draw-objects)

;; variables
;; (setq *joy-axes* nil)
;; (setq *joy-buttons* nil)
;; (setq *end-pose* nil)
;; (setq *joint_command_msg* (instance sensor_msgs::JointState :init))
;; (setq *save-angles* nil)
;; (setq *passive-mode* nil)

;;viewer
(setq vp #f(-958.862 794.316 860.356)
      vt #f(11.3147 -19.7581 215.055)
      lra 140
      uda 27)
(send *irtviewer* :viewpoint vp)
(send *irtviewer* :look1 vt lra uda)
(send *irtviewer* :draw-objects)

(setq *v* (copy-object (send *irtviewer* :viewer :viewing)))

;; start teleop node
;; (joystick-init)


;; (defun arm-move())

(ros::roseus "comb_node")
(ros::rate 10)
(ros::advertise "/joint_command" sensor_msgs::JointState 1)
(while (ros::ok)
  (ros::spin-once)
  (when (eq *passive-mode* t)
      (send *robot* :angle-vector (send *ri* :state :potentio-vector))
      (send *irtviewer* :draw-objects)
      )
  (ros::sleep)
  )

(exit)
